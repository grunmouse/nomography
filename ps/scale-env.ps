{(../../ps-math/) stealfolder} /auto-diff-lib ifnotkey


%тип данных верхнего элемента стека, стек под ним не изменяется
/safetype {
	count
	0 eq
	{
		/nulltype
	}
	{
		dup type
	}
	ifelse
} def

% Рисует штрих, заданный полярными координатами
% dir - направление штриха в градусах
% length - длина штриха
%[ length, dir ]
/polar-line {
	gsave
		rotate
		0 rlineto
		stroke
	grestore
} def

%[length, dir]
/polar-to {
	exch
	1 index 
	% dir, length, dir
	rotate
	0 rlineto
	neg
	rotate
} def

%[f]
/scale-env {
	0 dict begin
		/fun exch def % Запоминаемая функция шкалы
		/diff {
			%[t]
			[ exch 1 ] % [ [t 1] ]
			auto-diff-lib begin
				fun
			end
		} def % [ [x(t) x'(t)] [y(t) y'(t)] ] - массив двух пар значений, покоординатно: функции и первой производной
		
		/curve-dir {
			%[x]
			[ exch diff]
			{1 get} forall
			exch atan
		} def % - положительное направление кривой в данной точке

		/step 1 def % Шаг черчения кривой
		/tostring {12 string cvs} def % Функция преобразования значения параметра в текст подписи
		/target { 0.5 0 0 0.5} def % Матрица расчёта точки прицеливания
		/space 2 def % Отступ подписи
		/level0 5 def % Длина штриха нулевого уровня вложенности делений
		/dlevel 1.5 def % Уменьшение длины штриха при увеличении уровня вложенности
		/a {} def % функция, вычисляющая курс входа по направлению штриха
		/dir {pop 0} def % функция, вычисляющая направление штриха по текущему аргументу
		
		%[level]
		/mark-len {
			dlevel mul neg
			level0 add
		} def
		
		% Установить новую матрицу точки прицеливания
		/settarget {
			4 array astore cvx 
			/target exch def
		} def
		
		% [x0, x1]
		/line {
			/fun load 3 1 roll
			f-line
		} def

		/curve {
			/fun load 3 1 roll
			step f-curve
		} def
		
		% Перейти в точку, заданную агрументом функции
		/movepos {
			dup /currentarg exch def % Сохраняем текущий аргумент
			fun moveto
		} def
		
		% Элементы оператора относительных координат точки прицеливания
		/left { 0 0 } def % абсцисса начала строки
		/first { 0 0.5 } def % абсцисса середины первого символа
		/center { 0.5 0 } def % абсцисса середины строки
		/last { 1 -0.5 } def % абсцисса середины последнего символа
		/right { 1 0 } def % абсцисса конца строки
		/top {0 1} def % ордината линии прописных
		/middle {0 0.5} def % средняя ордината
		/bottom {0 0} def % ордината базовой линии

		/rat {
			3 dict begin
				/den exch def
				/nom exch def
				[
					[ den /mul /round /cvi nom /mod 0 /eq ] {cvx} forall 
				] cvx
			end
		} def

		%Рисует надписанный штрих для указанного значения
		%[label, x] 
		%[x] - если строка опущена, то она будет создана их x
		/value {
			0 dict begin
				/x exch def
				x movepos
				safetype /stringtype eq
					{}
					{currentarg tostring}
					ifelse
				target 
				currentarg dir dup a exch
				space level0 point-detail
			end
		} def		
		
		/struct-value {
			0 dict begin
				/x exch def
				x movepos
				target 
				currentarg dir dup a exch
				space level0 point-detail
			end
		} def
		

		% [label, dir2, lx, ly, x] - рисует надписанный штрих в виде выноски
		/out-label {
			gsave
			0 dict begin
				%x
				movepos
				level0 currentarg dir polar-to
				%lx ly
				lineto
				%dir2
				/dir2 exch def
				%label
				
				target
				dir2 a dir2 
				space 
				level0 
				%str, xw, xh, yw, yh, a, dir, space, length
				point-detail
			end
			grestore
		} def
		
		% [label, dir2, dlx, dly, x] - то же, но с относительным смещением
		/xout-label {
			0 dict begin
				/x exch def
				x fun
				2add
				%[label, dir2, lx, ly]
				x
				out-label
			end
		} def
		
		%[x, level]
		/mutemark {
			mark-len % x, len
			exch % len, x
			dup movepos
			dir	% len, dir
			polar-line
		} def
		
		% Двухуровневая группа немых штрихов на интервале 
		% (x1; x2) - интервал построения
		% c - цена малых делений
		% level - уровень штрихов делений, level-1 - уровень штрихов больших делений
		% cond - функция, опознающая штрих большого деления
		% [ x1 x2 c level cond ]
		/mutegroup2 {
			0 dict begin
				/cond exch def
				/level exch def
				/c exch def
				/x2 exch def
				/x1 exch def
				
				
				gsave
				x1 c add
				c
				x2
				{
					%[x]
					dup % [x, x]
					cond {level  1 sub}{ level} ifelse % [x, level]
					mutemark
				} for
				grestore
			end
		} def				
		
		% Группа немых штрихов на интервале 
		% (x1; x2) - интервал построения
		% c - цена делений
		% level - уровень штрихов делений
		% [ x1 x2 c level ]
		/mutegroup {
			0 dict begin
				/level exch def
				/c exch def
				/x2 exch def
				/x1 exch def
				
				gsave
				x1 c add
				c
				x2
				{
					%[x]
					level
					mutemark
				} for
				grestore
			end
		} def		
		
		%[nom1, den1, nom2, den2, nomC, denC, level]
		/mutegrouprat {
			0 dict begin
				/level exch def
				/c 2edef
				/x2 2edef
				/x1 2edef
				
				gsave
				x1 c fraction-add
				c
				x2
				{
					%[nom, den]
					div
					%[x]
					level
					mutemark
				} fraction-for
				grestore
			end
		} def
		
		%[nom1, den1, nom2, den2, nomC, denC, level, nomM, denM]
		/mutegrouprat2 {
			/m 2edef
			/level exch def
			/c 2edef
			/x2 2edef
			/x1 2edef
			
			gsave
				x1 c fraction-add
				c
				x2
				{
					%[nom, den]
					2dup div
					/x exch def
					
					%[nom, den]
					m
					fraction-has-div
					{
						%then
						x
						level 1 sub
						mutemark
					}
					{
						%else
						x
						level
						mutemark
					}
					ifelse
					
				} fraction-for
			
			grestore
		} def

		/fun load type
		/dicttype eq
		{
			fun
			currentdict
			copy
			pop
		}
		if

		currentdict
	end
} def